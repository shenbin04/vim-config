snippet ap "Add property: `key: value,`" b
$1: $0,
endsnippet

snippet ao "Add object property: `key: {},`" b
$1: {
  $0
},
endsnippet

snippet aof "Add object function: `fun() {}`"
$1($2) {
  $0
}
endsnippet

snippet ec "Add export const: `export const module = {};`" b
export const $0
endsnippet

snippet "^af" "Add function: `export function () {}`" r
${1:export }function $2($3) {
  $0
};
endsnippet

snippet "^(\s+)af" "Add function: `export function () {}`" r
`!p snip.rv = ' ' * len(match.group(1))`function $1($2) {
`!p snip.rv = ' ' * len(match.group(1))`  $0
`!p snip.rv = ' ' * len(match.group(1))`};
endsnippet

snippet aaf "Add arrow function: `() => {}`" w
${1:()} => {$2}
endsnippet

snippet afe "Add arrow function expression: `a = () => {}`"
$1 = ${2:()} => {$3}
endsnippet

snippet od "Add object destructure: `const {a} = data;`" b
const {$1} = ${0:props};
endsnippet

snippet ad "Add array destructure: `const [a] = data;`" b
const [$1] = ${0};
endsnippet

snippet im "Import"
import {${2}} from '${1}';
endsnippet

snippet imt "Import type"
import type {${2}} from '${1}';
endsnippet

snippet ir "Import react"
import React from 'react';
endsnippet

snippet irt "Import react type"
import type {$1} from 'react';
endsnippet

snippet irrc "Import react-redux connect"
import {connect} from 'react-redux';
endsnippet

snippet iri "Import react-intl"
import {${1:FormattedMessage}} from 'react-intl';
endsnippet

snippet fo "Add flow object: `type a = {};`" b
type ${1:Props} = {|$0|};
endsnippet

snippet fp "Add flow for Props" b
type OwnProps = {|
  $1
|};
type Props = {|
  ...OwnProps,
  $2
|};
$0
endsnippet

snippet nc "New react class component" b
// @flow
import React from 'react';

type Props = {|$3|};

${1:export }class ${2:`!v util#GetBaseFileName()`} extends React.Component<Props> {
  return (
    $0
  );
}
endsnippet

snippet nf "New react functional component" b
// @flow
import React from 'react';

${1:export }const ${2:`!v util#GetBaseFileName()`} = () => {
  return (
    $0
  );
}
endsnippet

snippet ntj "New javascript test" b
// @flow
import {${1:`!v util#GetBaseFileName()`}} from './`!v util#GetBaseFileName()`';

describe('$1', () => {
  it('$2', () => {
    expect($3).$4;
  });
});
endsnippet

snippet nte "New react component test with enzyme" b
// @flow
import {shallow} from 'enzyme';
import React from 'react';

import {${1:`!v util#GetBaseFileName()`}} from './`!v util#GetBaseFileName()`';

describe('$1', () => {
  it('renders', () => {
    const component = shallow(<$1$2 />);
    expect(component).toMatchSnapshot();
  });
});
endsnippet

snippet ntt "new react component test with testing library" b
// @flow
import {screen, render} from '@testing-library/react';
import React from 'react';

import {${1:`!v util#GetBaseFileName()`}} from './`!v util#GetBaseFileName()`';

const mockProps = {$2};

describe('$1', () => {
  it('${3:renders}', () => {
    render(<$1 {...mockProps} />);
    $5
  });
});
endsnippet

snippet cld "console.log(*.debug()) (jest)"
console.log($0.debug());
endsnippet

snippet exps "Expect to match snapshot"
expect(${0:component}).toMatchSnapshot();
endsnippet

snippet afm "Add FormattedMessage" i
<FormattedMessage
  defaultMessage="${1:${VISUAL}}"
  description="${2}"
  id="${3}"
/>
endsnippet

snippet it "it (jest)"
it('${1:description}', () => {
  $0
});
endsnippet

snippet des "describe (jest)"
describe('${1:description}', () => {
  $0
});
endsnippet

snippet bef "beforeEach (jest)"
beforeEach(() => {
  $0
});
endsnippet

snippet aft "afterEach (jest)"
afterEach(() => {
  $0
});
endsnippet

snippet befa "beforeAll (jest)"
beforeAll(() => {
  $0
});
endsnippet

snippet afta "afterAll (jest)"
afterAll(() => {
  $0
});
endsnippet

snippet db "debugger"
debugger;
endsnippet

snippet us "useState" b
const [$1, ${1/.+/set\u$0/}] = useState<$3>($4);
endsnippet

snippet ue "useEffect" b
useEffect(() => {
  $0
}, [$1]);
endsnippet

snippet uc "useContext" b
const ${1:context} = useContext<${2:T}>($3);
endsnippet

snippet ucb "useCallback" b
const ${1:callback} = useCallback(() => {
  $3
}, [${2}]);
endsnippet

snippet um "useMemo" b
const ${1:memo} = useMemo<${2:T}>(() => ${4:{
  $5
}}, [$3]);
endsnippet

snippet ur "useRef" b
const ${1:ref} = useRef<${2:T}>(${3:null});
endsnippet
